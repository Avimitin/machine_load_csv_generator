#!/usr/bin/ruby

# frozen_string_literal: true

require 'time'
require 'dotenv/load'
require 'sqlite3'
require 'pathname'
require 'English'

#
# Configuration
#

DATA_PATH = Pathname.new(ENV['DATA_PATH'])
DB_FILENAME = DATA_PATH.join(ENV['DB_FILENAME'])
PRIVATE_KEY = ENV['SSH_PRIVATE_KEY']
LOGIN_USER = ENV['SSH_LOGIN_USER']

#
# Types and Functions
#

Machine = Struct.new('Machine', :id, :addr)
LoadData = Struct.new(:users, :load)

def ssh(machine)
  if PRIVATE_KEY && LOGIN_USER
    "ssh -i #{PRIVATE_KEY} #{LOGIN_USER}@#{machine}"
  elsif PRIVATE_KEY
    "ssh -i #{PRIVATE_KEY} #{machine}"
  elsif LOGIN_USER
    "ssh #{LOGIN_USER}@#{machine}"
  else
    "ssh #{machine}"
  end
end

def insert_new_record(db, machine_id, record, test_time)
  db.execute(
    'INSERT INTO record (ttime, machine, users, load) VALUES (?, ?, ?, ?)',
    [test_time, machine_id, record.users, record.load]
  )
end

def get_load(machine)
  respond = `#{ssh(machine)} uptime`
  return LoadData.new(0, 0) if $CHILD_STATUS.to_i != 0

  result =
    /(?<user>\d+) users?,\s+load average: [\d.]+, (?<load>[\d.]+)/.match(
      respond
    )

  LoadData.new(result['user'], result['load'])
end

def get_machines(db)
  db.execute('SELECT id, addr FROM machine').collect { |row| Machine.new(row[0], row[1]) }
end

#
# Main logic
#

db = SQLite3::Database.open(DB_FILENAME)
machines = get_machines(db)

machines.each do |mach|
  current_timestamp = Time.now.to_i
  record = get_load(mach.addr)
  insert_new_record(db, mach.id, record, current_timestamp)
end

puts "#{machines.length} machines tested"
